# top-most EditorConfig file
root = true

# Don't use tabs for indentation.
[*]
indent_style = space
# (Please don't specify an indent_size here; that has too many unintended consequences.)

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
insert_final_newline = true
charset = utf-8
end_of_line = crlf

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# Dotnet code style settings:
[*.{cs,vb}]
# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first                                     = true

# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field                                    = false : error
dotnet_style_qualification_for_property                                 = false : error
dotnet_style_qualification_for_method                                   = false : error
dotnet_style_qualification_for_event                                    = false : error

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members              = true : error
dotnet_style_predefined_type_for_member_access                          = true : error

# Suggest more modern language features when available
dotnet_style_object_initializer                                         = true : suggestion
dotnet_style_collection_initializer                                     = true : suggestion
dotnet_style_coalesce_expression                                        = true : error
dotnet_style_null_propagation                                           = true : error
dotnet_style_explicit_tuple_names                                       = true : error

# Naming rule: private static fields should use pascal casing
dotnet_naming_symbols.private_static_field.applicable_kinds             = field
dotnet_naming_symbols.private_static_field.applicable_accessibilities   = private
dotnet_naming_symbols.private_static_field.required_modifiers           = static
dotnet_naming_style.private_static_field.capitalization                 = pascal_case
dotnet_naming_rule.private_static_field.severity                        = error
dotnet_naming_rule.private_static_field.symbols                         = private_static_field
dotnet_naming_rule.private_static_field.style                           = private_static_field

# Naming rule: private fields should use camel casing and use underscore as a prefix
dotnet_naming_symbols.private_field.applicable_kinds                    = field
dotnet_naming_symbols.private_field.applicable_accessibilities          = private
dotnet_naming_style.private_field.capitalization                        = camel_case
dotnet_naming_style.private_field.required_prefix                       = _
dotnet_naming_rule.private_field.severity                               = error
dotnet_naming_rule.private_field.symbols                                = private_field
dotnet_naming_rule.private_field.style                                  = private_field

# Naming rule: non-private fields should use pascal casing
dotnet_naming_symbols.non_private_field.applicable_kinds                = field
dotnet_naming_symbols.non_private_field.applicable_accessibilities      = public,internal,friend,protected,protected_internal,protected_friend
dotnet_naming_style.non_private_field.capitalization                    = pascal_case
dotnet_naming_rule.non_private_field.severity                           = error
dotnet_naming_rule.non_private_field.symbols                            = non_private_field
dotnet_naming_rule.non_private_field.style                              = non_private_field

# Naming rule: parameters should use camel casing
dotnet_naming_symbols.parameter.applicable_kinds                        = parameter
dotnet_naming_style.parameter.capitalization                            = camel_case
dotnet_naming_rule.parameter.severity                                   = error
dotnet_naming_rule.parameter.symbols                                    = parameter
dotnet_naming_rule.parameter.style                                      = parameter

# Naming rule: interface types should use pascal casing with I as a prefix
dotnet_naming_symbols.interface_type.applicable_kinds                   = interface
dotnet_naming_style.interface_type.capitalization                       = pascal_case
dotnet_naming_style.interface_type.required_prefix                      = I
dotnet_naming_rule.interface_type.severity                              = error
dotnet_naming_rule.interface_type.symbols                               = interface_type
dotnet_naming_rule.interface_type.style                                 = interface_type

# Naming rule: non-interface types should use pascal casing
dotnet_naming_symbols.non_interface_type.applicable_kinds               = class,struct,enum,delegate
dotnet_naming_style.non_interface_type.capitalization                   = pascal_case
dotnet_naming_rule.non_interface_type.severity                          = error
dotnet_naming_rule.non_interface_type.symbols                           = non_interface_type
dotnet_naming_rule.non_interface_type.style                             = non_interface_type

# Naming rule: methods, properties and events should use pascal casing
dotnet_naming_symbols.member.applicable_kinds                           = method,property,event
dotnet_naming_style.member.capitalization                               = pascal_case
dotnet_naming_rule.member.severity                                      = error
dotnet_naming_rule.member.symbols                                       = member
dotnet_naming_rule.member.style                                         = member

# CSharp code style settings:

# IDE0060: Remove unused parameter
dotnet_code_quality_unused_parameters = non_public:suggestion

[*.cs]
# Prefer "var" everywhere
csharp_style_var_for_built_in_types                                     = true : suggestion
csharp_style_var_when_type_is_apparent                                  = true : error
csharp_style_var_elsewhere                                              = true : suggestion

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods                                  = false : none
csharp_style_expression_bodied_constructors                             = false : error
csharp_style_expression_bodied_operators                                = false : none

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties                               = true : suggestion
csharp_style_expression_bodied_indexers                                 = true : suggestion
csharp_style_expression_bodied_accessors                                = true : suggestion

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check                   = true : suggestion
csharp_style_pattern_matching_over_as_with_null_check                   = true : suggestion
csharp_style_inlined_variable_declaration                               = true : suggestion
csharp_style_throw_expression                                           = true : suggestion
csharp_style_conditional_delegate_call                                  = true : suggestion

# Newline settings
csharp_new_line_before_open_brace                                       = all
csharp_new_line_before_else                                             = true
csharp_new_line_before_catch                                            = true
csharp_new_line_before_finally                                          = true
csharp_new_line_before_members_in_object_initializers                   = true
csharp_new_line_before_members_in_anonymous_types                       = true

# Spacing
csharp_space_after_cast                                                 = false
csharp_space_after_keywords_in_control_flow_statements                  = true
csharp_space_between_method_call_parameter_list_parentheses             = false
csharp_space_between_method_declaration_parameter_list_parentheses      = false